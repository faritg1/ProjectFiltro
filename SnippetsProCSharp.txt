{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"RepoGenerico": {
		"prefix": "gen-GenericRepository" ,
		"body": [
			"public class GenericRepository<T> : IGenericRepository<T> where T : BaseEntity",
			"{",
			"\t private readonly $2Context _context;",
			"",
			"\t public GenericRepository($2Context context)",
			"\t {",
			"\t\t _context = context;",
			"\t }",
			"",
			"\t public virtual void Add(T entity)",
			"\t {",
			"\t\t _context.Set<T>().Add(entity);",
			"\t }",
			"",
			"\t public virtual void AddRange(IEnumerable<T> entities)",
			"\t {",
			"\t\t _context.Set<T>().AddRange(entities);",
			"\t }",
			"",
			"\t public virtual async Task<IEnumerable<T>> GetAllAsync()",
			"\t {",
			"\t\t return await _context.Set<T>().ToListAsync();",
			"\t }",
			"",
			"\t public virtual void Delete(T entity)",
			"\t {",
			"\t\t _context.Set<T>().AddRange(entity);",
			"\t }",
			"",
			"\t public virtual IEnumerable<T> Find(Expression<Func<T, bool>> expression)",
			"\t {",
			"\t\t return _context.Set<T>().Where(expression);",
			"\t }",
			"",
			"\t public virtual async Task<T> GetByIdAsync(int id)",
			"\t {",
			"\t\t return await _context.Set<T>().FindAsync(id);",
			"\t }",
			"",
			"\t public virtual void Remove(T entity)",
			"\t {",
			"\t\t _context.Set<T>().Remove(entity);",
			"\t }",
			"",
			"\t public virtual void RemoveRange(IEnumerable<T> entities)",
			"\t {",
			"\t\t _context.Set<T>().RemoveRange(entities);",
			"\t }",
			"",
			"\t public virtual void Update(T entity)",
			"\t {",
			"\t\t _context.Set<T>()",
			"\t\t\t .Update(entity);",
			"\t }",
			"}"
		],
		"description": "Genera un repositorio generico"
	},
	"IGenericRepository": {
		"prefix": "gen-IGenericRepository" ,
		"body": [
			"public interface IGenericRepository<T> where T : BaseEntity",
			"{",
			"\t Task<T> GetByIdAsync(int id);",
			"\t Task<IEnumerable<T>> GetAllAsync();",
			"\t IEnumerable<T> Find(Expression<Func<T, bool>> expression);",
			"\t //Task<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(int pageIndex, int pageSize, string search);",
			"\t void Add(T entity);",
			"\t void AddRange(IEnumerable<T> entities);",
			"\t void Remove(T entity);",
			"\t void RemoveRange(IEnumerable<T> entities);",
			"\t void Update(T entity);",
			"}"
		],
		"description": "Genera una interfaz de repositorio generico"
	},
	"EntityRepository": {
		"prefix": "gen-EntityRepository" ,
		"body": [
			"public class $1Repository : GenericRepository<$1>, I$1",
			"{",
			"\t private readonly $2Context _context;",
			"\t public $1Repository($2Context context) : base(context)",
			"\t {",
			"\t\t _context = context;",
			"\t }",
			"}"
		],
		"description": "Genera una interfaz de repositorio generico"
	},
	"InterfaceEntity": {
		"prefix": "gen-EntityInterface" ,
		"body": [
			"public interface I$1 : IGenericRepository<$1>",
			"{",
			"}"
		],
		"description": "Genera una interfaz de una entidad"
	},
	"BaseEntity": {
		"prefix": "gen-BaseEntity" ,
		"body": [
			"public class BaseEntity",
			"{",
			"\t public int Id { get; set; }",
			"}"
		],
		"description": "Genera una clase base para las entidades"
	},
	"UnitOfWork": {
		"prefix": "gen-UnitOfWork" ,
		"body": [
			"public class UnitOfWork : IUnitOfWork, IDisposable",
			"{",
			"\t private readonly $1Context _context;",
			"",
			"\t public UnitOfWork($1Context context)",
			"\t {",
			"\t\t _context = context;",
			"\t }",
			"",
			"\t public void Dispose()",
			"\t {",
			"\t\t _context.Dispose();",
			"\t }",
			"\t public async Task<int> SaveAsync()",
			"\t {",
			"\t\t return await _context.SaveChangesAsync();",
			"\t }",
			"}"
		],
		"description": "Genera una clase UnitOfWork"
	},
	"IUnitOfWork": {
		"prefix": "gen-IUnitOfWork" ,
		"body": [
			"public interface IUnitOfWork",
			"{",
			"\t I$1 $1 { get;}  //InterfazEntidad EntidadPlural {get;}",
			"\t Task<int> SaveAsync();",
			"}"
		],
		"description": "Genera una interfaz UnitOfWork"
	},
	"EntitiInterfaceIUnitOfWork": {
		"prefix": "gen-InterfaceEntity-IUnitOfWork" ,
		"body": [
			"I$1 $1s { get;}",
		],
		"description": "Genera un atributo tipo Interfaz de IUnitOfWork"
	},
	"DbContext": {
		"prefix": "gen-Context" ,
		"body": [
			"public class $1Context : DbContext",
			"{",
			"\t public $1Context(DbContextOptions<$1Context> options) : base(options)",
			"\t {",
			"\t }",
			"\t public DbSet<$2> $2s {get; set;}  //Entidad EntidadPlural",
			"",
			"\t protected override void OnModelCreating(ModelBuilder modelBuilder)",
			"\t {",
			"		/*modelBuilder.Entity<Cliente>()",
			"		.HasOne(a => a.ClienteDireccion)",
			"		.WithOne(b => b.Clientes)",
			"		.HasForeignKey<ClienteDireccion>(b => b.IdCliente);*/",
			""
			"		base.OnModelCreating(modelBuilder);",
			"		modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());",
			"\t }",
			"}"
		],
		"description": "Genera una clase DbContext"
	},
	"DbSet Entitiy": {
		"prefix": "gen-Context-Entity" ,
		"body": [
			"\t public DbSet<$1> $1s {get; set;}",
		],
		"description": "Genera una entidad en el DbContext"
	},
	"Entity Configuration": {
		"prefix": "gen-entity-configuration" ,
		"body": [
			"using Microsoft.EntityFrameworkCore;",
			"using Microsoft.EntityFrameworkCore.Metadata.Builders;",
			"",
			"namespace Persistence.Data.Configuracion;",
			"public class $1Configuration : IEntityTypeConfiguration<$1>",
			"{",
			"\t public void Configure(EntityTypeBuilder<$1> builder)",
			"\t {",
			"\t\t builder.ToTable(${1});",
			"",
			"\t\t builder.HasKey(e => $2);",
			"\t\t builder.Property(e => $2);",
			"\t }",
			"}"
		],
		"description": "Genera una clase de configuración de entidad"
	},
	"ToTable": {
		"prefix": "gen-to-table" ,
		"body": [
			"builder.ToTable(${1});"
		],
		"description": "Genera una llamada al método ToTable"
	},
	"PrimaryKey": {
		"prefix": "gen-pk-field" ,
		"body": [
			"builder.HasKey(e => e.$4);",
			"builder.Property(e => e.$4);"			
		],
		"description": "Genera una llamada al método HasKey"
	},
	"Pk with 2 Foreing": {
		"prefix": "gen-pk-from-fk",
		"body": [
		  "            //Acá iran las llaves foraneas, puedes poner más ",
		  "            builder.HasKey(e => new { e.$1, e.$2}); ",
		  "",
		  "            //La configuracion de la primera llave foranea",
		  "            builder.HasOne(e => e.$3)",
		  "            .WithMany(e => e.$5) ",
		  "            .HasForeignKey(e => e.$1);",
		  "",
		  "            //La configuracion de la segunda",
		  "            builder.HasOne(e => e.$4)",
		  "            .WithMany(e => e.$5)",
		  "            .HasForeignKey(e => e.$2);",
		  "",
		  "            /*",
		  "            Ejemplo",
		  "            builder.HasKey(e => new { e.IdInsumo, e.IdPrenda});",
		  "",
		  "            builder.HasOne(e => e.Insumos)",
		  "            .WithMany(e => e.InsumoPrendas)",
		  "            .HasForeignKey(e => e.IdInsumo);",
		  "",
		  "            builder.HasOne(e => e.Prendas)",
		  "            .WithMany(e => e.InsumoPrendas)",
		  "            .HasForeignKey(e => e.IdPrenda);",
		  "            */"
		],
		"description": "Crea una llave principal con 2 o más llaves foráneas"
	},
	"One Many Configuration": {
		"prefix": "gen-one-to-many" ,
		"body": [
			"builder.HasOne(p => p.$1)",
			"\t .WithMany(p => p.$2)",
			"\t .HasForeignKey(p => p.$3);"
		],
		"description": "Genera una llamada al método HasOne"
	},
	"Varchar Required": {
		"prefix": "gen-varchar-required" ,
		"body": [
			"builder.Property(e => e.$1)",
			"\t .IsRequired()",
			"\t .HasMaxLength($2);"
		],
		"description": "Genera una llamada al método Property"
	},
	"Varchar": {
		"prefix": "gen-varchar" ,
		"body": [
			"builder.Property(e => e.$1)",
			"\t .HasMaxLength($2);"
		],
		"description": "Genera una llamada al método Property"
	},
	"Entero": {
		"prefix": "gen-int" ,
		"body": [
			"builder.Property(e => e.$1)",
			"\t HasColumnType(\"int\");"
		],
		"description": "Genera una llamada al método Property"
	},
	"PK_NO_AI": {
		"prefix": "gen-pk-no-autoincrement" ,
		"body": [
			"builder.HasKey(e => e.$1);",
			"builder.Property(e => e.$1)",
			"\t .ValueGeneratedNever();"
		],
		"description": "Genera una llamada al método HasKey"
	},
	"pk string annotation db": {
		"prefix": "gen-pk-string" ,
		"body": [
			"builder.Property(e => e.$1)",
			".HasAnnotation(\"MySql:ValueGenerationStrategy\", MySqlValueGenerationStrategy.IdentityColumn)"
			".HasMaxLenght(${2});"
		],
		"description": "Genera una llamada al método HasAnnotation y MaxLenght para una PK de tipo string"
	},
	"pk string fluent": {
		"prefix": "gen-pk-string-fluent" ,
		"body": [
			"builder.HasKey(e => e.$1);",
			"builder.Property(e => e.$1)",
			".HasMaxLength($2);"
		],
		"description": "Genera una llamada al método HasKey y MaxLenght para una PK de tipo string"
	},
	"ConfiguraRateLimiting": {
		  "prefix": "gen-ratelimiting",
		  "body": [
			"    public static void ConfigureRateLimiting(this IServiceCollection services)",
			"    {",
			"        services.AddMemoryCache();",
			"        services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
			"        services.AddInMemoryRateLimiting();",
			"",
			"        services.Configure<IpRateLimitOptions>(options =>",
			"        {",
			"            options.EnableEndpointRateLimiting = true;",
			"            options.StackBlockedRequests = false;",
			"            options.HttpStatusCode = 429;",
			"            options.RealIpHeader = \"X-Real-IP\";",
			"            options.ClientWhitelist = new List<string>();",
			"",
			"            options.GeneralRules = new List<RateLimitRule>",
			"            {",
			"                new RateLimitRule",
			"                {",
			"                    Endpoint = \"*\",",
			"                    Period = \"10s\",",
			"                    Limit = 2",
			"                }",
			"                // Puedes agregar más reglas personalizadas aquí",
			"            };",
			"        });",
			"    }"
		  ],
		  "description": "Configure Rate Limiting in C#"
		},
	"ConfiguraCors": {
		"prefix": "gen-configCors",
		"body": [
		  "public static void ConfigureCors(this IServiceCollection services) => services.AddCors(options =>",
		  "{",
		  "    options.AddPolicy(\"CorsPolicy\", builder =>",
		  "    {",
		  "        builder",
		  "            .AllowAnyOrigin()",
		  "            .AllowAnyMethod()",
		  "            .AllowAnyHeader();",
		  "    });",
		  "});"
		],
		"description": "Configure CORS in ApplicationServicesExtensions"
	  },
	  "ConfiguraAddApplicationServices": {
		"prefix": "gen-addapplicationservices",
		"body": [
			"public static void AddApplicationServices(this IServiceCollection services)",
			"{",
			"services.AddScoped<IUnitOfWork,UnitOfWork>();",
			"}",
		],
		"description": "Configure addApplicationServices in ApplicationServicesExtensions"
	  },

	  "ConfiguraApplicationServicesExtensions": {
		"prefix": "gen-applicationservicesextensions",
		"body": [
			"public static void ConfigureCors(this IServiceCollection services) => services.AddCors(options =>",
			"{",
			"    options.AddPolicy(\"CorsPolicy\", builder =>",
			"    {",
			"        builder",
			"            .AllowAnyOrigin()",
			"            .AllowAnyMethod()",
			"            .AllowAnyHeader();",
			"    });",
			"});"
			""
			""
			"public static void ConfigureRateLimiting(this IServiceCollection services)",
			"    {",
			"        services.AddMemoryCache();",
			"        services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
			"        services.AddInMemoryRateLimiting();",
			"",
			"        services.Configure<IpRateLimitOptions>(options =>",
			"        {",
			"            options.EnableEndpointRateLimiting = true;",
			"            options.StackBlockedRequests = false;",
			"            options.HttpStatusCode = 429;",
			"            options.RealIpHeader = \"X-Real-IP\";",
			"            options.ClientWhitelist = new List<string>();",
			"",
			"            options.GeneralRules = new List<RateLimitRule>",
			"            {",
			"                new RateLimitRule",
			"                {",
			"                    Endpoint = \"*\",",
			"                    Period = \"10s\",",
			"                    Limit = 2",
			"                }",
			"                // Puedes agregar más reglas personalizadas aquí",
			"            };",
			"        });",
			"    }"
			""
			""
			"public static void AddApplicationServices(this IServiceCollection services)",
			"{",
			"	services.AddScoped<IUnitOfWork,UnitOfWork>();",
			"}",
		],
		"description": "Configure all ApplicationServicesExtensions"
	  },
	"ApiController": {
		"prefix": "gen-Entitycontroller",
		"body": [
		"using System;",
		"using System.Collections.Generic;",
		"using System.Linq;",
		"using System.Threading.Tasks;",
		"using API.Controllers;;",
		"using $1.Dtos;",
		"using AutoMapper;",
		"using Domain.Entities;",
		"using Domain.Interfaces;",
		"using Microsoft.AspNetCore.Http.HttpResults;",
		"using Microsoft.AspNetCore.Mvc;",
		"",
		"namespace $1.Controller",
		"//1. CarpetaApiNombre",
		"//2. NombreEntidad",
		"//3. Nombre en UnitOfWork, generalmente en plural",
		"{",
		"    public class $2Controller : BaseController",
		"    {",
		"        private readonly IUnitOfWork _unitOfWork;",
		"        private readonly IMapper _mapper;",
		"        private readonly $4Context _context;",
		"",
		"        public $2Controller(IUnitOfWork unitOfWork, IMapper mapper, $4Context context)",
		"        {",
		"            _unitOfWork = unitOfWork;",
		"            _mapper = mapper;",
		"            _context = context;",
		"        }",
		"",
		"        [HttpGet]",
		"        [ProducesResponseType(StatusCodes.Status200OK)]",
		"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		"        public async Task<ActionResult<IEnumerable<$2Dto>>> Get()",
		"        {",
		"            var result = await _unitOfWork.$3.GetAllAsync();",
		"            return _mapper.Map<List<$2Dto>>(result);",
		"        }",
		"",
		"        [HttpGet(\"{id}\")]",
		"        [ProducesResponseType(StatusCodes.Status200OK)]",
		"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
		"        public async Task<ActionResult<$2Dto>> Get(int id)",
		"        {",
		"            var result = await _unitOfWork.$3.GetByIdAsync(id);",
		"",
		"            if (result == null)",
		"            {",
		"                return NotFound();",
		"            }",
		"",
		"            return _mapper.Map<$2Dto>(result);",
		"        }",
		"",
		"        [HttpPost]",
		"        [ProducesResponseType(StatusCodes.Status201Created)]",
		"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		"        public async Task<ActionResult<$2>> Post($2Dto $2Dto)",
		"        {",
		"            var result = _mapper.Map<$2>($2Dto);",
		"            this._unitOfWork.$3.Add(result);",
		"            await _unitOfWork.SaveAsync();",
		"",
		"            if (result == null)",
		"            {",
		"                return BadRequest();",
		"            }",
		"            $2Dto.Id = result.Id;",
		"            return CreatedAtAction(nameof(Post), new { id = $2Dto.Id }, $2Dto);",
		"        }",
		"",
		"        [HttpPut(\"{id}\")]",
		"        [ProducesResponseType(StatusCodes.Status200OK)]",
		"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
		"        public async Task<ActionResult<$2Dto>> Put(int id, [FromBody] $2Dto $2Dto)",
		"        {",
		"            if ($2Dto.Id == 0)",
		"            {",
		"                $2Dto.Id = id;",
		"            }",
		"",
		"            if($2Dto.Id != id)",
		"            {",
		"                return BadRequest();",
		"            }",
		"",
		"            if($2Dto == null)",
		"            {",
		"                return NotFound();",
		"            }",
		"",			
		"			 // Por si requiero la fecha actual"
		"            /*if ($2Dto.Fecha == DateTime.MinValue)",
		"            {",
		"                $2Dto.Fecha = DateTime.Now;",
		"            }*/",
		"",
		"            var result = _mapper.Map<$2>($2Dto);",
		"            _unitOfWork.$3.Update(result);",
		"            await _unitOfWork.SaveAsync();",
		"            return $2Dto;",
		"        }",
		"",
		"        [HttpDelete(\"{id}\")]",
		"        [ProducesResponseType(StatusCodes.Status204NoContent)]",
		"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
		"        public async Task<IActionResult> Delete(int id)",
		"        {",
		"            var result = await _unitOfWork.$3.GetByIdAsync(id);",
		"",
		"            if (result == null)",
		"            {",
		"                return NotFound();",
		"            }",
		"",
		"            _unitOfWork.$3.Remove(result);",
		"            await _unitOfWork.SaveAsync();",
		"            return NoContent();",
		"        }",
		"    }",
		"}"
		],
		"description": "Entity controller in Controller"
	},
	"Repository Property UnitOfWork": {
		"prefix": "gen-EntityProperty-Unitofwork",
		"body": [
		"private $1Repository _$2;  //CiudadRepository _ciudad",
		"public I$1 $1s",
			"{",
			"    get",
			"    {",
			"        if (_$2 == null)",
			"        {",
			"            _$2 = new $1Repository(_context);",
			"        }",
			"        return _$2;",
			"    }",
			"}"
		],
		"description": "Generate Entity Repository Property in Unit Of Work"
		},
		"AddDbContext in Program.cs": {
		"prefix": "gen-AddDbContext-Program.cs",
		"body": [
			"builder.Services.AddDbContext<$1Context>(options =>",
			"{",
			"    string connectionString = builder.Configuration.GetConnectionString(\"MySqlConex\");",
			"    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));",
			"});"
		],
		"description": "Add AddDbContext in Program.cs"
		},
		"Connection String Database": {
		"prefix": "gen-connectionstring",
		"body": [
			"\"ConnectionStrings\": {",
			"    \"MySqlConex\": \"server=localhost;user=root;password=123456;database=nombreDB\"",
			"}"
		],
		"description": "Add Connection String to appsettings.json"
		},
		"File Config MappingProfiles": {
		"prefix": "gen-MappingProfiles",
		"body": [
		"public class MappingProfiles : Profile",
		"{",
		"	public MappingProfiles(){",
		"	CreateMap<$1,$1Dto>().ReverseMap(); //Entidad EntidadDto",
		"	}",
		"}"
		],
		"description": "Generate the basic document of MappingProfiles"
		},
		"Entity Mapper": {
		"prefix": "gen-EntityMapper",
		"body": [
		"CreateMap<$1,$1Dto>().ReverseMap(); //Entidad EntidadDto",
		],
		"description": "Generate Entity for MappingProfiles"
		},
		"Comand for DB First": {
		"prefix": "terminal-DBFirst",
		"body": [
			"dotnet ef dbcontext scaffold \"server=localhost;user=root;password=123456;database=proyectoclase\" Pomelo.EntityFrameworkCore.MySql -s API -p Persistence --context JardinContext --context-dir Data --output-dir Entities"
		],
		"description": "Comand for DB First"
		},
		"Automigration Code": {
			"prefix": "gen-migrationInProgram",
			"body": [
			  "// Va después del if (app.Environment.IsDevelopment())",
			  "using (var scope = app.Services.CreateScope())",
			  "{",
			  "    var services = scope.ServiceProvider;",
			  "    var loggerFactory = services.GetRequiredService<ILoggerFactory>();",
			  "    try",
			  "    {",
			  "        var context = services.GetRequiredService<$1Context>();",
			  "        await context.Database.MigrateAsync();",
			  "    }",
			  "    catch (Exception ex)",
			  "    {",
			  "        var _logger = loggerFactory.CreateLogger<Program>();",
			  "        _logger.LogError(ex, \"Ocurrio un error durante la migracion\");",
			  "    }",
			  "}"
			],
			"description": "Automigration Code"
		},
		"Generate calls from ApplicationServices": {
		"prefix": "gen-callsAplicationServices",
		"body": [
			"// Va después de builder.Services.AddSwaggerGen();",
			"builder.Services.ConfigureRateLimiting();",
			"builder.Services.AddAutoMapper(Assembly.GetEntryAssembly());",
			"builder.Services.ConfigureCors();",
			"builder.Services.AddApplicationServices();",
			"",
			"builder.Services.AddDbContext<$1Context>(options =>",
			"{",
			"    string connectionString = builder.Configuration.GetConnectionString(\"MySqlConex\");",
			"    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));",
			"});",
			"",
			"// Va despues de app.MapControllers();",
			"app.UseCors(\"CorsPolicy\");",
			"",
			"app.UseIpRateLimiting();"
		],
		"description": "Generate calls from ApplicationServices"
		},
		"Genera consultas de una tabla": {
		"prefix": "gen-ConsultasUnaTabla",
		"body": [
			"// Devuelve un listado con el código de oficina y la ciudad donde hay oficinas.",
			"[HttpGet(\"OficinaAndCity\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> OficinaAndCity()",
			"{",
			"    var oficinas = await _context.Oficinas",
			"        .Select(o => new { o.Id, o.Ciudad })",
			"        .ToListAsync();",
			"",
			"    if (oficinas == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(oficinas);",
			"}",
			"",
			"// Devuelve un listado con la ciudad y el teléfono de las oficinas de España.",
			"[HttpGet(\"CityAndPhoneInSpain\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> CityAndPhoneInSpain()",
			"{",
			"    var result = await _context.Oficinas",
			"        .Where(o => o.Pais == \"España\")",
			"        .Select(o => new { o.Ciudad, o.Telefono })",
			"        .ToListAsync();",
			"",
			"    if (result == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(result);",
			"}",
			"",
			"// Devuelve un listado con el nombre, apellidos y email de los empleados cuyo jefe tiene un código de jefe igual a 7",
			"",
			"[HttpGet(\"InfoWithBossId7\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> InfoWithBossId7()",
			"{",
			"    var result = await _context.Empleados",
			"        .Where(e => e.CodigoJefe == 7)",
			"        .Select(e => new { nombre = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\", e.Email})",
			"        .ToListAsync();",
			"",
			"    if (result == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(result);",
			"}",
			"",
			"// 4. Devuelve el nombre del puesto, nombre, apellidos y email del jefe de la empresa.",
			"[HttpGet(\"InfoBoss\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> InfoBoss()",
			"{",
			"    var results = await _context.Empleados",
			".Where(e => e.CodigoJefe == null)",
			".Select(e => new { nombre = $\"{e.Nombre} {e.Apellido1}\", e.Email })",
			".FirstOrDefaultAsync();",
			"",
			"    if (results == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(results);",
			"}",
			"",
			"// 5. Devuelve un listado con el nombre, apellidos y puesto de aquellos empleados que no sean representantes de ventas.",
			"[HttpGet(\"NotSellsRepresentEmployee\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> NotSellsRepresentEmployee()",
			"{",
			"var results = await _context.Empleados",
			".Where(e => e.Puesto != \"Representante Ventas\")",
			".Select(e => new { nombre = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\", e.Puesto })",
			".ToListAsync();",
			"",
			"    if (results == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(results);",
			"}",
			"",
			"// 6. Devuelve un listado con el nombre de los todos los clientes españoles.",
			"[HttpGet(\"SpainCustomers\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> SpainCustomers()",
			"{",
			"var results = await _context.Clientes",
			".Where(c => c.Pais == \"Spain\")",
			".Select(c => new { c.NombreCliente, c.Pais })",
			".ToListAsync();",
			"",
			"    if (results == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(results);",
			"}",
			"",
			"// 7. Devuelve un listado con los distintos estados por los que puede pasar un pedido.",
			"[HttpGet(\"OrderStatements\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> OrderStatements()",
			"{",
			"var results = await _context.Pedidos",
			".Select(p => p.Estado)",
			".Distinct()",
			".ToListAsync();",
			"",
			"    if (results == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(results);",
			"}",
			"",
			"// 8. Devuelve un listado con el código de cliente de aquellos clientes que realizaron algún pago en 2008.",
			"[HttpGet(\"CustomerPays2008\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> GetQuery()",
			"{",
			"var results = await _context.Pagos",
			".Where(p => p.FechaPago.Year == 2008)",
			".Select(p => p.Id)",
			".Distinct()",
			".ToListAsync();",
			"",
			"    if (results == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(results);",
			"}",
			"",
			"// 9. Devuelve un listado con el código de pedido, código de cliente, fecha esperada y fecha de entrega de los pedidos que no han sido entregados a tiempo.",
			"[HttpGet(\"OffTimeDeliver\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> OffTimeDeliver()",
			"{",
			"var results = await _context.Pedidos",
			".Where(p => p.FechaEntrega > p.FechaEsperada || p.FechaEntrega == null)",
			".OrderBy(p => p.FechaEsperada)",
			".Select(p => new { p.Id, p.CodigoCliente, p.FechaEsperada, p.FechaEntrega })",
			".ToListAsync();",
			"",
			"    if (results == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(results);",
			"}",
			"",
			"// 10. Devuelve un listado con el código de pedido, código de cliente, fecha esperada y fecha de entrega de los pedidos cuya fecha de entrega ha sido al menos dos días antes de la fecha esperada.",
			"[HttpGet(\"2DaysBeforeDeliver\")]",
			"[ProducesResponseType(StatusCodes.Status200OK)]",
			"[ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"public async Task<ActionResult<string>> 2DaysBeforeDeliver()",
			"{",
			"var results = await _context.Pedidos",
			".Where(p => p.FechaEntrega.HasValue && p.FechaEntrega < p.FechaEsperada.AddDays(-2))",
			".Select(p => new { p.Id, p.CodigoCliente, p.FechaEsperada, p.FechaEntrega })",
			".ToListAsync();",
			"",
			"    if (results == null)",
			"    {",
			"        return NotFound();",
			"    }",
			"",
			"    return Ok(results);",
			"}",
			"",
			"// 11. Devuelve un listado de todos los pedidos que fueron rechazados en 2009.",
			"        [HttpGet(\"RejectOrders\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> RejectOrders()",
			"        {",
			"var results = await _context.Pedidos",
			"    .Where(p => p.Estado == \"Rechazado\" && p.FechaPedido.Year == 2009)",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 12. Devuelve un listado de todos los pedidos que han sido entregados en el mes de enero de cualquier año.",
			"        [HttpGet(\"AllOrdersDeliveredInJanuary\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> AllOrdersDeliveredInJanuary()",
			"        {",
			"var results = await _context.Pedidos",
			"    .Where(p => p.Estado == \"Entregado\" && p.FechaEntrega.HasValue && p.FechaEntrega.Value.Month == 1)",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 13. Devuelve un listado con todos los pagos que se realizaron en el año 2008 mediante Paypal. Ordene el resultado de mayor a menor.",
			"        [HttpGet(\"FormPaymentBePayPal\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> FormPaymentBePayPal()",
			"        {",
			"var results = await _context.Pagos",
			"    .Where(p => p.FormaPago == \"PayPal\" && p.FechaPago.Year == 2008)",
			"    .OrderByDescending(p => p.Total)",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 14. Devuelve un listado con todas las formas de pago que aparecen en la tabla pago. Tenga en cuenta que no deben aparecer formas de pago repetidas.",
			"        [HttpGet(\"AllPaymentsForm\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> AllPaymentsForm()",
			"        {",
			"var results = await _context.Pagos",
			"    .Select(p => p.FormaPago)",
			"    .Distinct()",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 15. Devuelve un listado con todos los productos que pertenecen a la gama Ornamentales y que tienen más de 100 unidades en stock. El listado deberá estar ordenado por su precio de venta, mostrando en primer lugar los de mayor precio.",
			"        [HttpGet(\"ProductGammaOrnamentals\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> ProductGammaOrnamentals()",
			"        {",
			"var results = await _context.Productos",
			"    .Where(p => p.Gama == \"Ornamentales\" && p.CantidadEnStock > 100)",
			"    .OrderByDescending(p => p.PrecioVenta)",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 16. Devuelve un listado con todos los clientes que sean de la ciudad de Madrid y cuyo representante de ventas tenga el código de empleado 11 o 30.",
			"        [HttpGet(\"Employee11AndInMadrid\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> Employee11AndInMadrid()",
			"        {",
			"var results = await _context.Clientes",
			"    .Where(c => c.Ciudad == \"Madrid\" && (c.CodigoEmpleadoRepVentas == 11 || c.CodigoEmpleadoRepVentas == 30))",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }"
		],
		"description": "Genera consultas de una tabla"
		},
		"Genera consultas de multitabla interna": {
		"prefix": "gen-ConsultaMultiTablaInter",
		"body": [
			"// 1. Obtén un listado con el nombre de cada cliente y el nombre y apellido de su representante de ventas.",
			"        [HttpGet(\"CustomerAndEmployee\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomerAndEmployee()",
			"        {",
			"var results = await _context.Clientes",
			"    .Join(_context.Empleados,",
			"        c => c.CodigoEmpleadoRepVentas,",
			"        e => e.Id,",
			"        (c, e) => new { Cliente = c.NombreCliente, RepresentanteVentas = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\" })",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 2. Muestra el nombre de los clientes que hayan realizado pagos junto con el nombre de sus representantes de ventas.",
			"        [HttpGet(\"CustomerWithPaymentsAndEmployee\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomerWithPaymentsAndEmployee()",
			"        {",
			"var results = await _context.Clientes",
			"    .Join(_context.Empleados,",
			"        c => c.CodigoEmpleadoRepVentas,",
			"        e => e.Id,",
			"        (c, e) => new { Cliente = c.NombreCliente, RepresentanteVentas = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\" })",
			"    .GroupJoin(_context.Pagos,",
			"        ce => ce.Cliente,",
			"        p => p.IdNavigation.NombreCliente,",
			"        (ce, pagos) => new { ce.Cliente, ce.RepresentanteVentas, EstadoPago = pagos.Any() ? \"Realizo pago\" : \"No hay pago\" })",
			"    .Where(ce => ce.EstadoPago == \"Realizo pago\")",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 3. Muestra el nombre de los clientes que no hayan realizado pagos junto con el nombre de sus representantes de ventas.",
			"        [HttpGet(\"CustomerNotPay\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomerNotPay()",
			"        {",
			"var results = await _context.Clientes",
			"    .Join(_context.Empleados,",
			"        c => c.CodigoEmpleadoRepVentas,",
			"        e => e.Id,",
			"        (c, e) => new { Cliente = c.NombreCliente, RepresentanteVentas = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\" })",
			"    .GroupJoin(_context.Pagos,",
			"        ce => ce.Cliente,",
			"        p => p.IdNavigation.NombreCliente,",
			"        (ce, pagos) => new { ce.Cliente, ce.RepresentanteVentas, EstadoPago = pagos.Any() ? \"Realizo pago\" : \"No hay pago\" })",
			"    .Where(ce => ce.EstadoPago == \"No hay pago\")",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 4. Devuelve el nombre de los clientes que han hecho pagos y el nombre de sus representantes junto con la ciudad de la oficina a la que pertenece el representante.",
			"        [HttpGet(\"CustomerWithPayEmployeeWithOffice\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomerWithPayEmployeeWithOffice()",
			"        {",
			"var results = await _context.Clientes",
			"    .Join(_context.Empleados,",
			"        c => c.CodigoEmpleadoRepVentas,",
			"        e => e.Id,",
			"        (c, e) => new { Cliente = c.NombreCliente, RepresentanteVentas = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\", CodigoOficina = e.CodigoOficinaNavigation.Ciudad })",
			"    .GroupJoin(_context.Pagos,",
			"        ce => ce.Cliente,",
			"        p => p.IdNavigation.NombreCliente,",
			"        (ce, pagos) => new { ce.Cliente, ce.RepresentanteVentas, ce.CodigoOficina, EstadoPago = pagos.Any() ? \"Realizo pago\" : \"No hay pago\" })",
			"    .Where(ce => ce.EstadoPago == \"Realizo pago\")",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 5. Devuelve el nombre de los clientes que no hayan hecho pagos y el nombre de sus representantes junto con la ciudad de la oficina a la que pertenece el representante.",
			"        [HttpGet(\"CustomerWithNoPayEmployeeWithOffice\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomerWithNoPayEmployeeWithOffice()",
			"        {",
			"var results = await _context.Clientes",
			"    .Join(_context.Empleados,",
			"        c => c.CodigoEmpleadoRepVentas,",
			"        e => e.Id,",
			"        (c, e) => new { Cliente = c.NombreCliente, RepresentanteVentas = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\", CodigoOficina = e.CodigoOficinaNavigation.Ciudad })",
			"    .GroupJoin(_context.Pagos,",
			"        ce => ce.Cliente,",
			"        p => p.IdNavigation.NombreCliente,",
			"        (ce, pagos) => new { ce.Cliente, ce.RepresentanteVentas, ce.CodigoOficina, EstadoPago = pagos.Any() ? \"Realizo pago\" : \"No hay pago\" })",
			"    .Where(ce => ce.EstadoPago == \"No hay pago\")",
			"    .ToListAsync();",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 6. Lista la dirección de las oficinas que tengan clientes en Fuenlabrada.",
			"        [HttpGet(\"OfficeAddresInCustomerFuenlabrada\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> OfficeAddresInCustomerFuenlabrada()",
			"        {",
			"var results = await _context.Empleados",
			"    .Where(e => e.Clientes.Any(c => c.Ciudad == \"Fuenlabrada\"))",
			"    .Select(e => $\"{e.CodigoOficinaNavigation.LineaDireccion1} {e.CodigoOficinaNavigation.LineaDireccion2}\")",
			"    .Distinct()",
			"    .ToListAsync();",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 7. Devuelve el nombre de los clientes y el nombre de sus representantes junto con la ciudad de la oficina a la que pertenece el representante.",
			"        [HttpGet(\"CustomerEmployeeAndOffice\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomerEmployeeAndOffice()",
			"        {",
			"var results = await _context.Clientes",
			"    .Join(_context.Empleados,",
			"        c => c.CodigoEmpleadoRepVentas,",
			"        e => e.Id,",
			"        (c, e) => new { Cliente = c.NombreCliente, RepresentanteVentas = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\", CodigoOficina = e.CodigoOficina })",
			"    .Join(_context.Oficinas,",
			"        ce => ce.CodigoOficina,",
			"        o => o.Id,",
			"        (ce, o) => new { ce.Cliente, ce.RepresentanteVentas, CiudadOficina = o.Ciudad })",
			"    .Distinct()",
			"    .ToListAsync();",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 8. Devuelve un listado con el nombre de los empleados junto con el nombre de sus jefes.",
			"        [HttpGet(\"BossOfBoss\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> BossOfBoss()",
			"        {",
			"var results = await _context.Empleados",
			"    .Select(e => new",
			"    {",
			"        NombreEmpleado = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\",",
			"        NombreJefe = e.CodigoJefeNavigation != null ? $\"{e.CodigoJefeNavigation.Nombre} {e.CodigoJefeNavigation.Apellido1} {e.CodigoJefeNavigation.Apellido2}\" : \"Sin jefe\"",
			"    })",
			"    .ToListAsync();",
			"",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 9. Devuelve un listado que muestre el nombre de cada empleados, el nombre de su jefe y el nombre del jefe de sus jefe.",
			"        [HttpGet(\"BossOfBossOfBoss\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> BossOfBossOfBoss()",
			"        {",
			"var results = await _context.Empleados",
			"    .Select(e => new",
			"    {",
			"        NombreEmpleado = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\",",
			"        NombreJefe = e.CodigoJefeNavigation != null ? $\"{e.CodigoJefeNavigation.Nombre} {e.CodigoJefeNavigation.Apellido1} {e.CodigoJefeNavigation.Apellido2}\" : \"Sin jefe\",",
			"        NombreJefeDelJefe = e.CodigoJefeNavigation != null && e.CodigoJefeNavigation.CodigoJefeNavigation != null ?",
			"            $\"{e.CodigoJefeNavigation.CodigoJefeNavigation.Nombre} {e.CodigoJefeNavigation.CodigoJefeNavigation.Apellido1} {e.CodigoJefeNavigation.CodigoJefeNavigation.Apellido2}\" : \"Sin jefe del jefe\"",
			"    })",
			"    .ToListAsync();",
			"",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"    ",
			"",
			"",
			"",
			"// 11. Devuelve un listado de las diferentes gamas de producto que ha comprado cada cliente.",
			"        [HttpGet(\"CustomersGammas\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomersGammas()",
			"        {",
			"var results = await _context.Clientes",
			"    .Join(_context.Pedidos,",
			"        c => c.Id,",
			"        p => p.CodigoCliente,",
			"        (c, p) => new { Cliente = c, Pedido = p })",
			"    .Join(_context.DetallePedidos,",
			"        cp => cp.Pedido.Id,",
			"        dp => dp.Id,",
			"        (cp, dp) => new { cp.Cliente, cp.Pedido, DetallePedido = dp })",
			"    .Join(_context.Productos,",
			"        cpd => cpd.DetallePedido.CodigoProducto,",
			"        pr => pr.Id,",
			"        (cpd, pr) => new { cpd.Cliente, cpd.Pedido, cpd.DetallePedido, Producto = pr })",
			"    .GroupBy(cpdp => new { cpdp.Cliente.Id, cpdp.Cliente.NombreCliente })",
			"    .Select(group => new",
			"    {",
			"        ClienteNombre = group.Key.NombreCliente,",
			"        GamasCompradas = string.Join(\", \", group.Select(cpdp => cpdp.Producto.Gama).Distinct())",
			"    })",
			"    .ToListAsync();",
			"",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }"
		],
		"description": "Genera consultas de multitabla interna"
		},
		"Genera consultas de multitabla externa": {
		"prefix": "gen-ConsultaMultiTablaExtern",
		"body": [
			"// 1. Clientes sin pagos",
			"        [HttpGet(\"CustomersWithOutPayments\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomersWithOutPayments()",
			"        {",
			"            var results = await _context.Clientes",
			"                .GroupJoin(_context.Pagos,",
			"                    c => c.Id,",
			"                    p => p.Id,",
			"                    (c, pagos) => new { Cliente = c, Pagos = pagos })",
			"                .Where(cp => !cp.Pagos.Any())",
			"                .Select(cp => cp.Cliente)",
			"                .ToListAsync();",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 2. Clientes sin pedidos",
			"        [HttpGet(\"GetQuery\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> GetQuery()",
			"        {",
			"",
			"            var results = await _context.Clientes",
			"                .GroupJoin(_context.Pedidos,",
			"                    c => c.Id,",
			"                    p => p.CodigoCliente,",
			"                    (c, pedidos) => new { Cliente = c, Pedidos = pedidos })",
			"                .Where(cp => !cp.Pedidos.Any())",
			"                .Select(cp => cp.Cliente)",
			"                .ToListAsync();",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 3. Clientes sin pagos o pedidos",
			"        [HttpGet(\"CustomersWithOutPaymentsOrOrders\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomersWithOutPaymentsOrOrders()",
			"        {",
			"",
			"            var results = await _context.Clientes",
			"                .Where(c => !_context.Pagos.Any(p => p.IdNavigation.Id == c.Id) && !_context.Pedidos.Any(pe => pe.CodigoClienteNavigation.Id == c.Id))",
			"                .ToListAsync();",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 4. Empleados sin oficina",
			"        [HttpGet(\"EmployeesWithoutOffice\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> EmployeesWithoutOffice()",
			"        {",
			"",
			"var results = await _context.Empleados",
			"    .Where(e => e.CodigoOficina == null)",
			"    .ToListAsync();",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return NotFound();",
			"            }",
			"",
			"            return Ok(results);",
			"        }",
			"",
			"// 5. Devuelve un listado que muestre solamente los empleados que no tienen un",
			"cliente asociado.",
			"",
			"        [HttpGet(\"EmployeeWithOutCustomer\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> EmployeeWithOutCustomer()",
			"        {",
			"",
			"           var results = await _context.Empleados",
			"    .Where(e => !e.Clientes.Any())",
			"    .Select(e => new",
			"    {",
			"        NombreEmpleado = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\",",
			"        CodigoEmpleado = e.Id // Puedes ajustar esto según el nombre de la propiedad que representa el código de empleado en tu modelo",
			"    })",
			"    .ToListAsync();",
			"",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return BadRequest();",
			"            }",
			"            return Ok(results);",
			"        }",
			"",
			"// 6. Devuelve un listado que muestre solamente los empleados que no tienen un",
			"cliente asociado junto con los datos de la oficina donde trabajan.",
			"        [HttpGet(\"EmployeeWithOutCustomerAndWithOffice\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> EmployeeWithOutCustomerAndWithOffice()",
			"        {",
			"",
			"var results = await _context.Empleados",
			"    .Where(e => !e.Clientes.Any())",
			"    .Select(e => new",
			"    {",
			"        NombreEmpleado = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\",",
			"        CodigoEmpleado = e.Id, // Ajusta esto según el nombre de la propiedad que representa el código de empleado en tu modelo",
			"        Oficina = new",
			"        {",
			"            Ciudad = e.CodigoOficinaNavigation.Ciudad,",
			"            Pais = e.CodigoOficinaNavigation.Pais,",
			"            Region = e.CodigoOficinaNavigation.Region,",
			"            // Agrega aquí las propiedades adicionales de Oficina que desees incluir en el resultado",
			"        }",
			"    })",
			"    .ToListAsync();",
			"",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return BadRequest();",
			"            }",
			"            return Ok(results);",
			"        }",
			"",
			"// 7. Empleados sin oficina y sin cliente",
			"        [HttpGet(\"EmployeeWithoutOfficeandCustomer\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> EmployeeWithoutOfficeandCustomer()",
			"        {",
			"",
			"        var results = await _context.Empleados",
			"        .Where(e => e.CodigoOficina == null && !e.Clientes.Any())",
			"        .ToListAsync();",
			"",
			"",
			"            if (results == null){",
			"                return BadRequest();",
			"            }",
			"            return Ok(results);",
			"        }",
			"",
			"// 8. Productos sin pedido",
			"[HttpGet(\"ProductsWithOutOrders\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> ProductsWithOutOrders()",
			"        {",
			"",
			"        var results = await _context.Productos",
			"            .Where(p => !p.DetallePedidos.Any())",
			"            .ToListAsync();",
			"",
			"",
			"            if (results == null){",
			"                return BadRequest();",
			"            }",
			"            return Ok(results);",
			"        }",
			"",
			"// 9. Productos sin pedido con detalles",
			"        [HttpGet(\"ProductsWithOutOrderWithDetails\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> ProductsWithOutOrderWithDetails()",
			"        {",
			"",
			"            var results = await _context.Productos",
			"                .Where(p => !p.DetallePedidos.Any())",
			"                .Select(p => new",
			"                {",
			"                    p.Nombre,",
			"                    p.Descripcion,",
			"                    p.GamaNavigation.Imagen",
			"                })",
			"                .ToListAsync();",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return BadRequest();",
			"            }",
			"            return Ok(results);",
			"        }",
			"",
			"",
			"// 10.1 Devuelve las oficinas donde no trabajan ninguno de los empleados que",
			"hayan sido los representantes de ventas de algún cliente que haya realizado",
			"la compra de algún producto de la gama Frutales.",
			"        [HttpGet(\"OfficesWithEmployeeGammaFrutales\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> OfficesWithEmployeeGammaFrutales()",
			"        {",
			"",
			"            var results = await _context.Oficinas",
			"    .Where(o => !o.Empleados.Any(e => e.Clientes.Any(c => c.Pedidos.Any(p => p.DetallePedidos.Any(dp => dp.CodigoProductoNavigation.GamaNavigation.Id == \"Frutales\")))))",
			"    .ToListAsync();",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return BadRequest();",
			"            }",
			"            return Ok(results);",
			"        }",
			"",
			"// 11. . Devuelve un listado con los clientes que han realizado algún pedido pero no",
			"han realizado ningún pago.",
			"        [HttpGet(\"CustomersWithOrderAndWithoutPayments\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> CustomersWithOrderAndWithoutPayments()",
			"        {",
			"",
			"           var results = await _context.Clientes",
			"    .Where(c => c.Pedidos.Any() && !c.Pagos.Any())",
			"    .ToListAsync();",
			"",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return BadRequest();",
			"            }",
			"            return Ok(results);",
			"        }",
			"",
			"// 12.Devuelve un listado con los datos de los empleados que no tienen clientes",
			"asociados y el nombre de su jefe asociado.",
			"        [HttpGet(\"EmployeeWithOutCustomersWithBoss\")]",
			"        [ProducesResponseType(StatusCodes.Status200OK)]",
			"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"",
			"        public async Task<ActionResult<string>> EmployeeWithOutCustomersWithBoss()",
			"        {",
			"",
			"           var results = await _context.Empleados",
			"    .Where(e => !e.Clientes.Any())",
			"    .Select(e => new",
			"    {",
			"        NombreEmpleado = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\",",
			"        JefeAsociado = e.CodigoJefeNavigation != null ? $\"{e.CodigoJefeNavigation.Nombre} {e.CodigoJefeNavigation.Apellido1} {e.CodigoJefeNavigation.Apellido2}\" : \"Sin jefe\"",
			"    })",
			"    .ToListAsync();",
			"",
			"",
			"",
			"            if (results == null)",
			"            {",
			"                return BadRequest();",
			"            }",
			"            return Ok(results);",
			"        }",
			""
		],
		"description": "Genera consultas de multitabla externa"
		},
		"Genera consultas resumen": {
			"prefix": "gen-ConsultaResumen",
			"body": [
			  "// ¿Cuántos empleados hay en la compañía?",
			  "        [HttpGet(\"EmployeesInTheCompany\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> EmployeesInTheCompany()",
			  "        {",
			  "",
			  "            var results = await _context.Empleados.CountAsync();",
			  "",
			  "            if (results == 0)",
			  "            {",
			  "                return BadRequest();",
			  "            }",
			  "            return Ok(results);",
			  "        }",
			  "",
			  "// ¿Cuántos clientes tiene cada país?",
			  "",
			  "        [HttpGet(\"CustomersInEachCountry\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> CustomersInEachCountry()",
			  "        {",
			  "",
			  "            var results = await _context.Clientes",
			  "                .GroupBy(c => c.Pais)",
			  "                .Select(g => new { Pais = g.Key, CantidadClientes = g.Count() })",
			  "                .ToListAsync();",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "// ¿Cuál fue el pago medio en 2009?",
			  "",
			  "        [HttpGet(\"2009MostPayment\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> 2009MostPayment()",
			  "        {",
			  "",
			  "            var results = await _context.Pagos",
			  "            .Where(p => p.FechaPago.Year == 2009)",
			  "            .AverageAsync(p => p.Total);",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "// ¿Cuántos pedidos hay en cada estado? Ordena el resultado de forma descendente por el número de pedidos.",
			  "",
			  "        [HttpGet(\"OrderByDesendent\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> OrderByDesendent()",
			  "        {",
			  "",
			  "            var results = await _context.Pedidos",
			  "                .GroupBy(p => p.Estado)",
			  "                .Select(g => new { Estado = g.Key, CantidadPedidos = g.Count() })",
			  "                .OrderByDescending(r => r.CantidadPedidos)",
			  "                .ToListAsync();",
			  "",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "// Calcula el precio de venta del producto más caro y más barato en una misma consulta.",
			  "",
			  "",
			  "var preciosExtremos = await _context.Productos",
			  "    .Select(p => p.PrecioVenta)",
			  "    .AggregateAsync((min, next) => Math.Min(min, next), (max, next) => Math.Max(max, next));",
			  "// Calcula el número de clientes que tiene la empresa.",
			  "",
			  "",
			  "        [HttpGet(\"CustomerInCompany\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> CustomerInCompany()",
			  "        {",
			  "",
			  "            var results = await _context.Clientes.CountAsync();",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "// ¿Cuántos clientes existen con domicilio en la ciudad de Madrid?",
			  "",
			  "",
			  "        [HttpGet(\"GetQuery\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> GetQuery()",
			  "        {",
			  "",
			  "            var results = await _context.Clientes",
			  "    .Where(c => c.Ciudad == \"Madrid\")",
			  "    .CountAsync();",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "// ¿Calcula cuántos clientes tiene cada una de las ciudades que empiezan por M?",
			  "",
			  "        [HttpGet(\"CustomersInMCities\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> CustomersInMCities()",
			  "        {",
			  "",
			  "            ",
			  "        var results = await _context.Clientes",
			  "            .Where(c => c.Ciudad.StartsWith(\"M\"))",
			  "            .GroupBy(c => c.Ciudad)",
			  "            .Select(g => new { Ciudad = g.Key, CantidadClientes = g.Count() })",
			  "            .ToListAsync();",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "// Devuelve el nombre de los representantes de ventas y el número de clientes al que atiende cada uno.",
			  "",
			  "        [HttpGet(\"NumberOfCustomersEmployeesRepresentsOfSells\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> NumberOfCustomersEmployeesRepresentsOfSells()",
			  "        {",
			  "",
			  "            ",
			  "var results = await _context.Empleados",
			  "    .Where(e => e.Puesto == \"Representante Ventas\")",
			  "    .Select(e => new",
			  "    {",
			  "        Representante = $\"{e.Nombre} {e.Apellido1} {e.Apellido2}\",",
			  "        CantidadClientes = e.Clientes.Count",
			  "    })",
			  "    .ToListAsync();",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "// Calcula el número de clientes que no tiene asignado representante de ventas.",
			  "",
			  "",
			  "        [HttpGet(\"CustomersWithRepresentOfSells\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> CustomersWithRepresentOfSells()",
			  "        {",
			  "",
			  "            ",
			  "var results = await _context.Clientes",
			  "    .Where(c => c.CodigoEmpleadoRepVentas == null)",
			  "    .CountAsync();",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "",
			  "        -------------",
			  "",
			  "// Calcula la fecha del primer y último pago realizado por cada uno de los clientes. El listado deberá mostrar el nombre y los apellidos de cada cliente.",
			  "",
			  "var fechasPagosClientes = await _context.Clientes",
			  "    .Select(c => new",
			  "    {",
			  "        Cliente = $\"{c.NombreCliente} {c.NombreContacto} {c.ApellidoContacto}\",",
			  "        PrimerPago = c.Pagos.Min(p => p.FechaPago),",
			  "        UltimoPago = c.Pagos.Max(p => p.FechaPago)",
			  "    })",
			  "    .ToListAsync();",
			  "",
			  "// Calcula el número de productos diferentes que hay en cada uno de los pedidos.",
			  "",
			  "var productosPorPedido = await _context.Pedidos",
			  "    .Select(p => new",
			  "    {",
			  "        CodigoPedido = p.Id,",
			  "        NumeroProductos = p.DetallePedidos.Select(dp => dp.CodigoProducto).Distinct().Count()",
			  "    })",
			  "    .ToListAsync();",
			  "// Calcula la suma de la cantidad total de todos los productos que aparecen en cada uno de los pedidos.",
			  "",
			  "",
			  "        [HttpGet(\"NumbersOfProductsInEachOrder\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> GetQuery(NumbersOfProductsInEachOrder)",
			  "        {",
			  "",
			  "var results = await _context.Pedidos",
			  "    .Select(p => new",
			  "    {",
			  "        CodigoPedido = p.Id,",
			  "        NumeroProductos = p.DetallePedidos.Select(dp => dp.CodigoProducto).Distinct().Count()",
			  "    })",
			  "    .ToListAsync();",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "// Devuelve un listado de los 20 productos más vendidos y el número total de unidades que se han vendido de cada uno. El listado deberá estar ordenado por el número total de unidades vendidas.",
			  "",
			  "        [HttpGet(\"Top20MostSellerProducts\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> Top20MostSellerProducts()",
			  "        {",
			  "",
			  "var results = await _context.Productos",
			  "    .OrderByDescending(p => p.DetallePedidos.Sum(dp => dp.Cantidad))",
			  "    .Take(20)",
			  "    .Select(p => new",
			  "    {",
			  "        NombreProducto = p.Nombre,",
			  "        UnidadesVendidas = p.DetallePedidos.Sum(dp => dp.Cantidad)",
			  "    })",
			  "    .ToListAsync();",
			  "            // if(results == false){",
			  "            //     return BadRequest();",
			  "            // }",
			  "",
			  "            return Ok(results);",
			  "        }",
			  "// La facturación que ha tenido la empresa en toda la historia, indicando la base imponible, el IVA y el total facturado.",
			  "",
			  "var facturacionTotal = await _context.DetallePedidos",
			  "    .GroupBy(dp => dp.CodigoProducto)",
			  "    .Select(g => new",
			  "    {",
			  "        CodigoProducto = g.Key,",
			  "        BaseImponible = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad),",
			  "        IVA = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad) * 0.21,",
			  "        TotalFacturado = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad) * 1.21",
			  "    })",
			  "    .ToListAsync(); // --------- falta",
			  "// La misma información que en la pregunta anterior, pero agrupada por código de producto.",
			  "",
			  "var facturacionPorProducto = await _context.DetallePedidos",
			  "    .GroupBy(dp => dp.CodigoProducto)",
			  "    .Select(g => new",
			  "    {",
			  "        CodigoProducto = g.Key,",
			  "        BaseImponible = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad),",
			  "        IVA = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad) * 0.21,",
			  "        TotalFacturado = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad) * 1.21",
			  "    })",
			  "    .ToListAsync(); // ---------- falta",
			  "// La misma información que en la pregunta anterior, pero agrupada por código de producto filtrada por los códigos que empiecen por OR.",
			  "",
			  "var facturacionPorProductoFiltrado = await _context.DetallePedidos",
			  "    .Where(dp => dp.CodigoProducto.StartsWith(\"OR\"))",
			  "    .GroupBy(dp => dp.CodigoProducto)",
			  "    .Select(g => new",
			  "    {",
			  "        CodigoProducto = g.Key,",
			  "        BaseImponible = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad),",
			  "        IVA = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad) * 0.21,",
			  "        TotalFacturado = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad) * 1.21",
			  "    })",
			  "    .ToListAsync(); // ------ falta",
			  "// Lista las ventas totales de los productos que hayan facturado más de 3000 euros. Se mostrará el nombre, unidades vendidas, total facturado y total facturado con impuestos (21% IVA).",
			  "",
			  "var ventasTotalesMas3000 = await _context.DetallePedidos",
			  "    .GroupBy(dp => dp.CodigoProducto)",
			  "    .Where(g => g.Sum(dp => dp.Cantidad * dp.PrecioUnidad) > 3000)",
			  "    .Select(g => new",
			  "    {",
			  "        NombreProducto = g.KeyNavigation.Nombre,",
			  "        UnidadesVendidas = g.Sum(dp => dp.Cantidad),",
			  "        TotalFacturado = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad),",
			  "        TotalFacturadoConIVA = g.Sum(dp => dp.Cantidad * dp.PrecioUnidad) * 1.21",
			  "    })",
			  "    .ToListAsync();",
			  "// Muestra la suma total de todos los pagos que se realizaron para cada uno de los años que aparecen en la tabla pagos.",
			  "",
			  "        [HttpGet(\"PaysForEachYear\")]",
			  "        [ProducesResponseType(StatusCodes.Status200OK)]",
			  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
			  "",
			  "        public async Task<ActionResult<string>> PaysForEachYear()",
			  "        {",
			  "",
			  "var results = await _context.Pagos",
			  "    .GroupBy(p => p.FechaPago.Year)",
			  "    .Select(g => new",
			  "    {",
			  "        Año = g.Key,",
			  "        SumaTotalPagos = g.Sum(p => p.Total)",
			  "    })",
			  "    .ToListAsync();",
			  "            // if(results == false){",
			  "            //     return BadRequest();",
			  "            // }",
			  "",
			  "            return Ok(results);",
			  "        }"
			],
			"description": "Genera consultas resumen"
		},
		"Genera subconsultas 1.4.8.1": {
			"prefix": "gen-SubConsult1.4.8.1",
			"body": [
			  "// 1. Devuelve el nombre del cliente con mayor límite de crédito.",
			  "var clienteMayorLimiteCredito = await _context.Clientes",
			  "    .OrderByDescending(c => c.LimiteCredito)",
			  "    .Select(c => c.NombreCliente)",
			  "    .FirstOrDefaultAsync();",
			  "",
			  "// 2. Devuelve el nombre del producto que tenga el precio de venta más caro.",
			  "var productoMasCaro = await _context.Productos",
			  "    .OrderByDescending(p => p.PrecioVenta)",
			  "    .Select(p => p.Nombre)",
			  "    .FirstOrDefaultAsync();",
			  "",
			  "// 3. Devuelve el nombre del producto del que se han vendido más unidades.",
			  "var productoMasVendido = await _context.DetallePedidos",
			  "    .GroupBy(dp => dp.CodigoProducto)",
			  "    .OrderByDescending(g => g.Sum(dp => dp.Cantidad))",
			  "    .Select(g => g.KeyNavigation.Nombre)",
			  "    .FirstOrDefaultAsync();",
			  "",
			  "// 4. Los clientes cuyo límite de crédito sea mayor que los pagos que haya realizado.",
			  "var clientesConLimiteMayorAPagos = await _context.Clientes",
			  "    .Where(c => c.LimiteCredito > c.Pagos.Sum(p => p.Total))",
			  "    .Select(c => c.NombreCliente)",
			  "    .ToListAsync();",
			  "",
			  "// 5. Devuelve el producto que más unidades tiene en stock.",
			  "var productoMasUnidadesEnStock = await _context.Productos",
			  "    .OrderByDescending(p => p.CantidadEnStock)",
			  "    .Select(p => p.Nombre)",
			  "    .FirstOrDefaultAsync();",
			  "",
			  "// 6. Devuelve el producto que menos unidades tiene en stock.",
			  "var productoMenosUnidadesEnStock = await _context.Productos",
			  "    .OrderBy(p => p.CantidadEnStock)",
			  "    .Select(p => p.Nombre)",
			  "    .FirstOrDefaultAsync();",
			  "",
			  "// 7. Devuelve el nombre, los apellidos y el email de los empleados que están a cargo de Alberto Soria.",
			  "var empleadosACargoDeAlbertoSoria = await _context.Empleados",
			  "    .Where(e => e.CodigoJefeNavigation != null && e.CodigoJefeNavigation.Nombre == \"Alberto\" && e.CodigoJefeNavigation.Apellido1 == \"Soria\")",
			  "    .Select(e => new",
			  "    {",
			  "        Nombre = e.Nombre,",
			  "        Apellidos = $\"{e.Apellido1} {e.Apellido2}\",",
			  "        Email = e.Email",
			  "    })",
			  "    .ToListAsync();"
			],
			"description": "Genera subconsultas 1.4.8.1"
		},
		"Genera subconsultas 1.4.8.2 - 1.4.8.3": {
			"prefix": "gen-SubConsult1.4.8.3",
			"body": [
			  "// 1. Devuelve el producto que menos unidades tiene en stock.",
			  "var productoMenosUnidadesEnStock = await _context.Productos",
			  "    .OrderBy(p => p.CantidadEnStock)",
			  "    .Select(p => new { p.Nombre, UnidadesEnStock = p.CantidadEnStock })",
			  "    .FirstOrDefaultAsync();",
			  "// 2. Devuelve el nombre, apellido1 y cargo de los empleados que no representen a ningún cliente.",
			  "var empleadosSinClientes = await _context.Empleados",
			  "    .Where(e => e.Clientes.Count == 0)",
			  "    .Select(e => new { e.Nombre, e.Apellido1, e.Puesto })",
			  "    .ToListAsync();",
			  "// 3. Devuelve un listado que muestre solamente los clientes que no han realizado ningún pago.",
			  "var clientesSinPagos = await _context.Clientes",
			  "    .Where(c => c.Pagos.Count == 0)",
			  "    .Select(c => c.NombreCliente)",
			  "    .ToListAsync();",
			  "// 4. Devuelve un listado que muestre solamente los clientes que sí han realizado algún pago.",
			  "var clientesConPagos = await _context.Clientes",
			  "    .Where(c => c.Pagos.Count > 0)",
			  "    .Select(c => c.NombreCliente)",
			  "    .ToListAsync();",
			  "// 5. Devuelve un listado de los productos que nunca han aparecido en un pedido.",
			  "var productosSinPedidos = await _context.Productos",
			  "    .Where(p => p.DetallePedidos.Count == 0)",
			  "    .Select(p => p.Nombre)",
			  "    .ToListAsync();",
			  "// 6. Devuelve el nombre, apellidos, puesto y teléfono de la oficina de aquellos empleados que no sean representantes de ventas de ningún cliente.",
			  "var empleadosSinClientesRepresentados = await _context.Empleados",
			  "    .Where(e => e.CodigoEmpleadoRepVentas == null && e.Clientes.Count == 0)",
			  "    .Select(e => new { e.Nombre, e.Apellido1, e.Puesto, e.CodigoOficinaNavigation.Telefono })",
			  "    .ToListAsync();",
			  "// 7. Devuelve las oficinas donde no trabajan ninguno de los empleados que hayan sido los representantes de ventas de algún cliente que haya realizado la compra de algún producto de la gama Frutales.",
			  "var oficinasSinRepresentantesFrutales = await _context.Oficinas",
			  "    .Where(o => !o.Empleados.Any(e => e.Clientes.Any(c => c.Pedidos.Any(p => p.DetallePedidos.Any(dp => dp.CodigoProductoNavigation.GamaNavigation.DescripcionTexto == \"Frutales\")))))",
			  "    .Select(o => new { o.Ciudad, o.Pais, o.Region })",
			  "    .ToListAsync();",
			  "// 8. Devuelve un listado con los clientes que han realizado algún pedido pero no han realizado ningún pago.",
			  "var clientesConPedidosSinPagos = await _context.Clientes",
			  "    .Where(c => c.Pedidos.Any() && !c.Pagos.Any())",
			  "    .Select(c => c.NombreCliente)",
			  "    .ToListAsync();"
			  
			  
			],
			"description": "Genera subconsultas 1.4.8.2 - 1.4.8.3"
		},
		"Genera Consulta variada": {
			"prefix": "gen-SubConsult1.4.8.3",
			"body": [
			  "// Devuelve el listado de clientes indicando el nombre del cliente y cuántos
pedidos ha realizado. Tenga en cuenta que pueden existir clientes que no
han realizado ningún pedido.",
				            "var results = await _context.Clientes
        .Select(c => new
        {
            NombreCliente = c.NombreCliente,
            CantidadPedidos = c.Pedidos.Count()
        }).ToListAsync();"
			  
			  
			],
			"description": "Genera subconsultas 1.4.8.2 - 1.4.8.3"
		}
  
}
